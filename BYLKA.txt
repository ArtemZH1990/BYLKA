Булочный магнат
После ухода сети Макдональдс из России Тимур решил открыть свою небольшую бургерную. Цена каждого бургера в его ресторане определяется количеством ингредиентов, которые выбирает сам посетитель. Вам доступны словари, в которых в качестве ключа указано название ингредиента, а в качестве значения — его цена. Все ингредиенты разбиты по категориям, например, овощи содержатся в одном словаре, соусы — в другом.

Напишите программу, которая принимает на вход ингредиенты, выбранные посетителем, и определяет их общую стоимость.

Формат входных данных
На вход программе подается последовательность ингредиентов, разделенных запятой без пробелов.

Формат выходных данных
Программа должна определить общую стоимость введенных ингредиентов и вывести полученный результат в виде чека, в котором указаны ингредиенты в лексикографическом порядке, количество каждых и их общая стоимость, в следующем формате:

<ингредиент 1> x <количество 1>
<ингредиент 2> x <количество 2>
...
-------------------------------
ИТОГ: <общая стоимость>р





Не плохо наколхозил.

from collections import ChainMap, Counter        

bread = {'булочка с кунжутом': 15, 'обычная булочка': 10, 'ржаная булочка': 15}
meat = {'куриный бифштекс': 50, 'говяжий бифштекс': 70, 'рыбный бифштекс': 40}
sauce = {'сливочно-чесночный': 15, 'кетчуп': 10, 'горчица': 10, 'барбекю': 15, 'чили': 15}
vegetables = {'лук': 10, 'салат': 15, 'помидор': 15, 'огурцы': 10}
toppings = {'сыр': 25, 'яйцо': 15, 'бекон': 30}

data = ChainMap(bread, meat, sauce, vegetables, toppings) 
order = input().split(',')
max_len_order = len(max(order, key= lambda x: len(x)))
total_price = f"ИТОГ: {sum(list(map(lambda x: data[x], order)))}р"
count_order = Counter(order)
line = list(map(lambda x: len(f"{x[0] + (' '*(max_len_order - len(x[0])))} x {x[1]}"), count_order.items()))
line.append(len(total_price))
[print(f"{i[0] + (' '*(max_len_order - len(i[0])))} x {i[1]}") for i in sorted(count_order.items(), key=lambda x: x[0])]
print('-'* max(line))
print(total_price)